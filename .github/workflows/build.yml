name: Build
on: [push,workflow_dispatch]

jobs:
  build_debian:
    name: Build Debian
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        debian_version: [ 'sid' ]
    container:
      image: debian:${{matrix.debian_version}}
    steps:
    - name: Update repositories
      run: apt update
    - name: Install packages
      env:
        DEBIAN_FRONTEND: noninteractive
      run: >
          apt install -y
          build-essential
          dh-make
          ssh
          git
          make
          cmake
          gcc
          g++
          pkg-config
          fakeroot
          gettext
          lsb-release
          libglib2.0-dev
          dpkg-dev
          libdbus-1-dev
          libboost-dev
          libprotobuf-dev
          protobuf-compiler
          libsqlite3-dev
          libgnutls28-dev
          libasound2-dev
          libpulse-dev
          libtag1-dev
          libicu-dev
          libgstreamer1.0-dev
          libgstreamer-plugins-base1.0-dev
          gstreamer1.0-alsa
          gstreamer1.0-pulseaudio
          libchromaprint-dev
          libfftw3-dev
          libcdio-dev
          libmtp-dev
          libgpod-dev
    - name: Install Qt 5
      env:
        DEBIAN_FRONTEND: noninteractive
      run: >
          apt install -y
          qtbase5-dev
          qtbase5-dev-tools
          qttools5-dev
          qttools5-dev-tools
          libqt5x11extras5-dev
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Add safe git directory
      shell: bash
      run: git config --global --add safe.directory ${GITHUB_WORKSPACE}
    - name: Create Build Environment
      shell: bash
      run: cmake -E make_directory build
    - name: Configure CMake
      shell: bash
      working-directory: build
      run: cmake .. -DBUILD_WITH_QT5=ON
    - name: make deb
      shell: bash
      run: dpkg-buildpackage -b -d -uc -us -nc -j2
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.1
      with:
        # A file, directory or wildcard pattern that describes what to upload
        path: /__w/strawberry/*.deb
        name: release
        
  build_popos:
    name: Build PopOS
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # 'bionic', 'focal', 'jammy', 'kinetic'
        ubuntu_version: [ 'jammy' ]
    container:
      image: ubuntu:${{matrix.ubuntu_version}}
    steps:
      - name: Install packages
        env:
          DEBIAN_FRONTEND: noninteractive
        run: >
            apt-get update && apt-get install -y
            build-essential
            dh-make
            ssh
            git
            make
            cmake
            pkg-config
            gcc
            g++
            fakeroot
            wget
            curl
            gettext
            lsb-release
            dpkg-dev
            libglib2.0-dev
            libboost-dev
            libdbus-1-dev
            libprotobuf-dev
            protobuf-compiler
            libsqlite3-dev
            libgnutls28-dev
            libasound2-dev
            libpulse-dev
            libtag1-dev
            libicu-dev
            libgstreamer1.0-dev
            libgstreamer-plugins-base1.0-dev
            libgstreamer-plugins-good1.0-dev
            gstreamer1.0-alsa
            gstreamer1.0-pulseaudio
            libchromaprint-dev
            libfftw3-dev
            libcdio-dev
            libmtp-dev
            libgpod-dev
      - name: Install Qt 5
        env:
          DEBIAN_FRONTEND: noninteractive
        run: apt-get update && apt-get install -y qtbase5-dev qtbase5-dev-tools qttools5-dev qttools5-dev-tools libqt5x11extras5-dev
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Add safe git directory
        run: git config --global --add safe.directory ${GITHUB_WORKSPACE}
      - name: Create Build Environment
        run: cmake -E make_directory build
      - name: Configure CMake
        working-directory: build
        run: cmake .. -DBUILD_WITH_QT5=ON
      - name: make deb
        run: dpkg-buildpackage -b -d -uc -us -nc -j2


  build-freebsd:
    name: Build FreeBSD
    runs-on: macos-10.15
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Build FreeBSD
      id: build-freebsd
      uses: vmactions/freebsd-vm@v0.3.0
      with:
        usesh: true
        mem: 4096
        prepare: pkg install -y git cmake pkgconf gettext-tools boost-libs glib gnutls qt6-base qt6-tools sqlite gstreamer1 gstreamer1-plugins chromaprint protobuf protobuf-c taglib libcdio libmtp gdk-pixbuf2 libgpod fftw3 googletest iconv icu
        run: |
          git config --global --add safe.directory ${GITHUB_WORKSPACE}
          cmake -E make_directory build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE="Debug"
          cmake --build . --config Debug --parallel 4
          cd ..
          rm -rf build


  build-macos:
    name: Build macOS
    runs-on: macos-11
    steps:

      - name: Remove packages
        run: brew remove aliyun-cli ant aws-sam-cli azure-cli bazelisk bicep composer geckodriver ghostscript go@1.17 helm httpd imagemagick kotlin maven mongodb-community@5.0 mongodb-database-tools mongosh nginx php postgresql@14 ruby@2.7 rustup-init sbt selenium-server swiftformat switchaudio-osx chromedriver firefox google-chrome graalvm-ce-java11 julia microsoft-edge r session-manager-plugin

      - name: Update packages
        run: brew update

      - name: Upgrade packages
        run: brew upgrade || true

      - name: Install packages
        run: |
          brew install pkg-config cmake ninja meson bison flex wget create-dmg gettext boost protobuf protobuf-c
          brew install glib glib-openssl glib-utils glib-networking gdk-pixbuf gobject-introspection orc
          brew install libffi openssl gnutls sqlite fftw libmtp libplist libxml2 libsoup
          brew install libogg libvorbis flac wavpack opus speex mpg123 lame twolame taglib chromaprint libbs2b libcdio libopenmpt faad2 faac fdk-aac musepack game-music-emu
          brew install qt6

      - name: Use modified gstreamer plugin formulas
        run: |
          wget https://files.strawberrymusicplayer.org/patches/gstreamer.rb
          wget https://files.strawberrymusicplayer.org/patches/gst-plugins-base.rb
          wget https://files.strawberrymusicplayer.org/patches/gst-plugins-good.rb
          wget https://files.strawberrymusicplayer.org/patches/gst-plugins-bad.rb
          wget https://files.strawberrymusicplayer.org/patches/gst-plugins-ugly.rb
          wget https://files.strawberrymusicplayer.org/patches/gst-libav.rb
          mv gstreamer.rb gst-plugins-{base,good,bad,ugly}.rb gst-libav.rb /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/

      - name: Build and install gstreamer
        run: brew reinstall --build-from-source gstreamer

      - name: Build and install gst-plugins-base
        run: brew reinstall --build-from-source gst-plugins-base

      - name: Build and install gst-plugins-good
        run: brew reinstall --build-from-source gst-plugins-good

      - name: Build and install gst-plugins-bad
        run: brew reinstall --build-from-source gst-plugins-bad

      - name: Build and install gst-plugins-ugly
        run: brew reinstall --build-from-source gst-plugins-ugly

      - name: Build and install gst-libav
        run: brew reinstall --build-from-source gst-libav

      - name: Build libgpod
        env:
          PERL_MM_USE_DEFAULT: 1
        run: |
          git clone https://github.com/strawberrymusicplayer/strawberry-libgpod
          cd strawberry-libgpod
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j 4
          sudo make install

      - uses: actions/checkout@v3
        with:
          # A file, directory or wildcard pattern that describes what to upload
          path: /__w/strawberry/*.deb
          name: release
