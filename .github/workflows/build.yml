name: Build
on: [push,workflow_dispatch]

jobs:
  build-ubuntu:
    name: Build Ubuntu
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ubuntu_version: [ 'jammy' ]
    container:
      image: ubuntu:${{matrix.ubuntu_version}}
    steps:
      - name: Update repositories
        run: apt update -y
      - name: Install packages
        env:
          DEBIAN_FRONTEND: noninteractive
        run: >
            apt install -y
            build-essential
            dh-make
            ssh
            git
            make
            cmake
            pkg-config
            gcc
            g++
            fakeroot
            wget
            curl
            gettext
            lsb-release
            rsync
            dpkg-dev
            libglib2.0-dev
            libboost-dev
            libdbus-1-dev
            libprotobuf-dev
            protobuf-compiler
            libsqlite3-dev
            libgnutls28-dev
            libasound2-dev
            libpulse-dev
            libtag1-dev
            libicu-dev
            libgstreamer1.0-dev
            libgstreamer-plugins-base1.0-dev
            libgstreamer-plugins-good1.0-dev
            gstreamer1.0-alsa
            gstreamer1.0-pulseaudio
            libchromaprint-dev
            libfftw3-dev
            libcdio-dev
            libmtp-dev
            libgpod-dev
      - name: Install Qt 5
        if: matrix.ubuntu_version == 'jammy'
        env:
          DEBIAN_FRONTEND: noninteractive
        run: apt install -y qtbase5-dev qtbase5-dev-tools qttools5-dev qttools5-dev-tools libqt5x11extras5-dev
      - name: Install Qt 6
        if: matrix.ubuntu_version != 'jammy'
        env:
          DEBIAN_FRONTEND: noninteractive
        run: apt install -y qt6-base-dev qt6-base-dev-tools qt6-tools-dev qt6-tools-dev-tools qt6-l10n-tools
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Add safe git directory
        run: git config --global --add safe.directory ${GITHUB_WORKSPACE}
      - name: Create Build Environment
        run: cmake -E make_directory build
      - name: Configure CMake
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -DBUILD_WERROR=ON
      - name: make deb
        run: dpkg-buildpackage -b -d -uc -us -nc -j2
      - name: Copy deb
        run: cp ../*.deb ../*.ddeb .
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ubuntu-${{matrix.ubuntu_version}}
          path: |
            *.deb
            *.ddeb
      - name: SSH key setup
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/ci'
        uses: shimataro/ssh-key-action@v2
        with:
          known_hosts: ${{secrets.SSH_KNOWN_HOSTS}}
          key: ${{ secrets.SSH_KEY }}
      - name: Create server path
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/ci'
        run: ssh -p ${{secrets.SSH_PORT}} -o StrictHostKeyChecking=no ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}} mkdir -p ${{secrets.BUILDS_PATH}}/ubuntu/${{matrix.ubuntu_version}}
      - name: rsync
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/ci'
        run: rsync -e "ssh -p ${{secrets.SSH_PORT}} -o StrictHostKeyChecking=no" -var *.deb *.ddeb ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}}:${{secrets.BUILDS_PATH}}/ubuntu/${{matrix.ubuntu_version}}/

  upload-release:
    name: Upload release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/ci'
    needs:
      - build-ubuntu
    steps:
      - name: Install rsync
        run: sudo apt install -y rsync

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get release version
        run: echo "release_version=$(git describe --tags --exact-match ${GITHUB_SHA} 2>/dev/null | head -1)" >> $GITHUB_ENV

      - name: Show release version
        if: env.release_version != ''
        run: echo "Release version:" ${{env.release_version}}

      - name: Show release assets
        if: env.release_version != ''
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: hub release show -f "%as" ${{env.release_version}}

      - name: Download artifacts
        if: env.release_version != ''
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: SSH key setup
        if: env.release_version != ''
        uses: shimataro/ssh-key-action@v2
        with:
          known_hosts: ${{secrets.SSH_KNOWN_HOSTS}}
          key: ${{secrets.SSH_KEY}}

      - name: Add artifacts to release
        if: env.release_version != ''
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          echo "Release version: ${{env.release_version}}"
          a_files=()
          for i in $(find artifacts -type f); do
            filename=$(basename $i)
            existing_asset=$(hub release show -f "%as" ${{env.release_version}} | tr -d '[:blank:]' | grep ".*/${filename}\$" 2>/dev/null || true)
            if [ "${existing_asset}" = "" ]; then
              echo "Adding file: ${filename}"
              if [ "${file_list}" = "" ]; then
                file_list="$i"
              else
                file_list="${file_list} $i"
              fi
              a_files+=("-a" "${i}")
            else
              echo "Skipping existing file: ${filename}"
            fi
          done
          if ! [ "${file_list}" = "" ]; then
            echo "Uploading files: ${file_list}"
            rsync -e "ssh -p ${{secrets.SSH_PORT}} -o StrictHostKeyChecking=no" -var ${file_list} ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}}:${{secrets.RELEASES_PATH}}/
          fi
          a_file_list="${a_files[@]}"
          if ! [ "${a_file_list}" = "" ]; then
            echo "Adding files to GitHub release: ${file_list}"
            hub release edit -m "Strawberry ${{env.release_version}}" ${a_file_list} "${{env.release_version}}"
          fi
